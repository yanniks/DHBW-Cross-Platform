/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: lecture.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
    typealias Version = _1
}

fileprivate let _protobuf_package = "dhbw.servercommunication"

struct Dhbw_Servercommunication_ServerLectureResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ServerLectureResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "lectures"),
        ]
    
    var lectures: [Dhbw_Servercommunication_Lecture] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &lectures)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !lectures.isEmpty {
            try visitor.visitRepeatedMessageField(value: lectures, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    func _protobuf_generated_isEqualTo(other: Dhbw_Servercommunication_ServerLectureResponse) -> Bool {
        if lectures != other.lectures {return false}
        if unknownFields != other.unknownFields {return false}
        return true
    }
}

struct Dhbw_Servercommunication_Lecture: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Lecture"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "begin"),
        2: .same(proto: "end"),
        3: .same(proto: "title"),
        4: .same(proto: "location"),
        5: .same(proto: "date"),
        6: .same(proto: "prof"),
        ]
    
    var begin: String = ""
    
    var end: String = ""
    
    var title: String = ""
    
    var location: String = ""
    
    var date: String = ""
    
    var prof: String = ""
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &begin)
            case 2: try decoder.decodeSingularStringField(value: &end)
            case 3: try decoder.decodeSingularStringField(value: &title)
            case 4: try decoder.decodeSingularStringField(value: &location)
            case 5: try decoder.decodeSingularStringField(value: &date)
            case 6: try decoder.decodeSingularStringField(value: &prof)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !begin.isEmpty {
            try visitor.visitSingularStringField(value: begin, fieldNumber: 1)
        }
        if !end.isEmpty {
            try visitor.visitSingularStringField(value: end, fieldNumber: 2)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 3)
        }
        if !location.isEmpty {
            try visitor.visitSingularStringField(value: location, fieldNumber: 4)
        }
        if !date.isEmpty {
            try visitor.visitSingularStringField(value: date, fieldNumber: 5)
        }
        if !prof.isEmpty {
            try visitor.visitSingularStringField(value: prof, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    func _protobuf_generated_isEqualTo(other: Dhbw_Servercommunication_Lecture) -> Bool {
        if begin != other.begin {return false}
        if end != other.end {return false}
        if title != other.title {return false}
        if location != other.location {return false}
        if date != other.date {return false}
        if prof != other.prof {return false}
        if unknownFields != other.unknownFields {return false}
        return true
    }
}

struct Dhbw_Servercommunication_ServerCourseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ServerCourseResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "courses"),
        ]
    
    var courses: [Dhbw_Servercommunication_Course] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &courses)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !courses.isEmpty {
            try visitor.visitRepeatedMessageField(value: courses, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    func _protobuf_generated_isEqualTo(other: Dhbw_Servercommunication_ServerCourseResponse) -> Bool {
        if courses != other.courses {return false}
        if unknownFields != other.unknownFields {return false}
        return true
    }
}

struct Dhbw_Servercommunication_Course: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Course"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "title"),
        ]
    
    var id: String = ""
    
    var title: String = ""
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &id)
            case 2: try decoder.decodeSingularStringField(value: &title)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    func _protobuf_generated_isEqualTo(other: Dhbw_Servercommunication_Course) -> Bool {
        if id != other.id {return false}
        if title != other.title {return false}
        if unknownFields != other.unknownFields {return false}
        return true
    }
}
